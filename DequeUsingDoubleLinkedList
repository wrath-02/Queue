// Node class for Doubly Linked List
class Node {
    int data;
    Node prev, next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

// Renamed the class to MyDeque to avoid conflict with java.util.Deque
class MyDeque {
    private Node front, rear;
    private int size;

    public MyDeque() {
        front = rear = null;
        size = 0;
    }

    // Check if deque is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Get the size of deque
    public int size() {
        return size;
    }

    // Insert at the front
    public void insertFront(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            front = rear = newNode;
        } else {
            newNode.next = front;
            front.prev = newNode;
            front = newNode;
        }
        size++;
    }

    // Insert at the rear
    public void insertRear(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            front = rear = newNode;
        } else {
            rear.next = newNode;
            newNode.prev = rear;
            rear = newNode;
        }
        size++;
    }

    // Delete from the front
    public void deleteFront() {
        if (isEmpty()) {
            System.out.println("Deque is empty!");
            return;
        }
        front = front.next;
        if (front == null) {
            rear = null; // If deque becomes empty
        } else {
            front.prev = null;
        }
        size--;
    }

    // Delete from the rear
    public void deleteRear() {
        if (isEmpty()) {
            System.out.println("Deque is empty!");
            return;
        }
        rear = rear.prev;
        if (rear == null) {
            front = null; // If deque becomes empty
        } else {
            rear.next = null;
        }
        size--;
    }

    // Get front element
    public int getFront() {
        if (isEmpty()) throw new RuntimeException("Deque is empty!");
        return front.data;
    }

    // Get rear element
    public int getRear() {
        if (isEmpty()) throw new RuntimeException("Deque is empty!");
        return rear.data;
    }

    // Display deque elements
    public void display() {
        if (isEmpty()) {
            System.out.println("Deque is empty!");
            return;
        }
        Node temp = front;
        System.out.print("Deque: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}

// Main class to test MyDeque
public class Main {
    public static void main(String[] args) {
        MyDeque deque = new MyDeque();  // Changed class name to MyDeque

        deque.insertRear(10);
        deque.insertRear(20);
        deque.insertFront(5);
        deque.insertFront(1);
        deque.display();  // Output: 1 5 10 20

        System.out.println("Front element: " + deque.getFront()); // 1
        System.out.println("Rear element: " + deque.getRear());   // 20

        deque.deleteFront();
        deque.display();  // Output: 5 10 20

        deque.deleteRear();
        deque.display();  // Output: 5 10
    }
}
